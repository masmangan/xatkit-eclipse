// automatically generated by Xtext
grammar com.xatkit.language.execution.Execution with com.xatkit.language.common.Common

import "com.xatkit.execution"
import "com.xatkit.common" as common
import "com.xatkit.intent" as intent
import "com.xatkit.platform" as platform
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase

ExecutionModel returns ExecutionModel:
	{ExecutionModel}
	(imports+=ImportDeclaration (imports+=ImportDeclaration)*)?
	('use' 'provider' eventProviderDefinitions+=[platform::EventProviderDefinition|QualifiedName])*
	(states+=State
	(states+=State)*)?
;
	

/*
 * Note: no need to specify the '{' and '}' for body and fallback reference, it is already done in XBlockExpression
 */
State returns State:
	{State}
	name=ID '{'
		('Body' body=XBlockExpression )?
		('Next' '{'
			transitions+=Transition
			(transitions+=Transition)*
		'}')?
		('Fallback' fallback=XBlockExpression )?
	'}'
;

/*
 * TODO ensure that a transition is either a wildcard or a condition
 */
Transition returns Transition:
	{Transition}
	(isWildcard?='_')?
	(condition=XOrExpression)?
	'-->'
	state=[State]
	(isEndOfPath?='endOfPath')?
;
	