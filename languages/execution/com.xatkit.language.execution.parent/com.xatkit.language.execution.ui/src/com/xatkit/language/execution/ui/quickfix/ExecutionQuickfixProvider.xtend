/*
 * generated by Xtext 2.12.0
 */
package com.xatkit.language.execution.ui.quickfix

import com.xatkit.language.execution.validation.ExecutionValidator
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider
import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.validation.Issue
import org.eclipse.xtext.ui.editor.model.edit.ISemanticModification
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext
import com.xatkit.execution.State
import com.xatkit.execution.ExecutionPackage

/**
 * Custom quickfixes.
 *
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
class ExecutionQuickfixProvider extends DefaultQuickfixProvider {

	@Fix(ExecutionValidator.CUSTOM_TRANSITION_SIBLING_IS_WILDCARD)
	def removeCustomTransition(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Remove custom transition', 'Remove the custom transition from the state', '', new ISemanticModification() {
			
			override apply(EObject element, IModificationContext context) throws Exception {
				val containingState = element.eContainer as State
				containingState.transitions.remove(element)
			}
		})
	}
	
	@Fix(ExecutionValidator.CUSTOM_TRANSITION_SIBLING_IS_WILDCARD)
	@Fix(ExecutionValidator.WILDCARD_TRANSITION_HAS_SIBLINGS)
	def removeWildcardTransition(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Remove wildcard transition', 'Remove the wildcard transition from the state', '', new ISemanticModification() {
			
			override apply(EObject element, IModificationContext context) throws Exception {
				val containingState = element.eContainer as State
				containingState.transitions.removeIf[it.isIsWildcard]
			}
		})
	}
	
	@Fix(ExecutionValidator.WILDCARD_TRANSITION_HAS_SIBLINGS)
	def removeAllCustomTransitions(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Remove all custom transitions', 'Remove all the custom transitions from the state', '', new ISemanticModification() {
			
			override apply(EObject element, IModificationContext context) throws Exception {
				val containingState = element.eContainer as State
				containingState.transitions.removeIf[!it.isIsWildcard]
			}
		})
	}
	
	@Fix(ExecutionValidator.FALLBACK_SHOULD_NOT_EXIST)
	def removeFallback(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, 'Remove Fallback', 'Remove the Fallback section from the state', '', new ISemanticModification() {
			
			override apply(EObject element, IModificationContext context) throws Exception {
				val state = element as State
				state.eUnset(ExecutionPackage.Literals.STATE__FALLBACK)
			}
		})
	}

}
