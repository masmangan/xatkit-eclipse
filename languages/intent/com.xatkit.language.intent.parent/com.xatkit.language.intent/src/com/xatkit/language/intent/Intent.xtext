// automatically generated by Xtext
grammar com.xatkit.language.intent.Intent with org.eclipse.xtext.common.Terminals

import "com.xatkit.intent" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Library returns Library:
	{Library}
	'Library' name=EString
	(customEntities+=CustomEntityDefinition)*
	(eventDefinitions+=(EventDefinition|IntentDefinition))*
;

CustomEntityDefinition:
	MappingEntityDefinition | CompositeEntityDefinition
;

MappingEntityDefinition returns MappingEntityDefinition:
	'mapping' name=ID '{'
	(entries+=MappingEntityDefinitionEntry)+
	'}'
;

MappingEntityDefinitionEntry returns MappingEntityDefinitionEntry:
	'value'referenceValue=EString ('synonyms:'(synonyms+=EString)+)?
;

CompositeEntityDefinition returns CompositeEntityDefinition:
	'composite' name=ID '{'
	(entries+=CompositeEntityDefinitionEntry)+
	'}'
;

CompositeEntityDefinitionEntry returns CompositeEntityDefinitionEntry:
	'value' (fragments+=TextFragment)+
;

TextFragment:
	EntityTextFragment | LiteralTextFragment
;

EntityTextFragment returns EntityTextFragment: 
	entityReference=EntityDefinitionReference
;

LiteralTextFragment returns LiteralTextFragment: 
	value=EString
;



EventDefinition returns EventDefinition:
	{EventDefinition}
	'event' name=EString
	(outContexts+=OutContextDefinition)?
;

IntentDefinition returns IntentDefinition:
	{IntentDefinition}
	'intent' name=EString ('follows' follows=[IntentDefinition|ID])?
	'{'
		(inContexts+=InContextDefinition)*
		'inputs' '{'
			trainingSentences+=EString (trainingSentences+=EString)*
		'}'
		(outContexts+=OutContextDefinition)*
		('default answers' '{'
			defaultAnswers+=EString (defaultAnswers+=EString)*
		'}'
		)?
	'}'
	;

InContextDefinition returns Context:
	{Context}
	RequiresContext name=EString //('(' 'lifeSpan' '='lifeSpan=INT ')')?
;

OutContextDefinition returns Context:
	{Context}
	CreatesContext name=EString (WithLifespan lifeSpan=INT)?
	('{'
		(parameters+=ContextParameter)+
	'}')?
;

ContextParameter returns ContextParameter:
	{ContextParameter}
	SetsParameter name=EString (FromFragment textFragment=EString '(' 'entity' entity=EntityDefinitionReference')')?
;

EntityDefinitionReference returns EntityDefinitionReference:
	(BaseEntityDefinitionReference | CustomEntityDefinitionReference)	
;

BaseEntityDefinitionReference returns BaseEntityDefinitionReference:
	{BaseEntityDefinitionReference}
	baseEntity=BaseEntityDefinition
;

CustomEntityDefinitionReference returns CustomEntityDefinitionReference:
	{CustomEntityDefinitionReference}
	customEntity=[CustomEntityDefinition]
	
;

BaseEntityDefinition returns BaseEntityDefinition:
	{BaseEntityDefinition}
	entityType=EntityType
;

enum EntityType returns EntityType:
	ANY = 'any' 
	| DATE_TIME = "date-time"
	| DATE = "date"
	| DATE_PERIOD = "date-period"
	| TIME = "time"
	| TIME_PERIOD = "time-period"
	| NUMBER = "number"
	| CARDINAL = "cardinal"
	| ORDINAL = "ordinal"
	| INTEGER = "integer"
	| NUMBER_SEQUENCE = "number-sequence"
	| FLIGHT_NUMBER = "flight-number"
	| UNIT_AREA = "unit-area"
	| UNIT_CURRENCY = "unit-currency"
	| UNIT_LENGTH = "unit-length"
	| UNIT_SPEED = "unit-speed"
	| UNIT_VOLUME = "unit-volume"
	| UNIT_WEIGHT = "unit-weight"
	| UNIT_INFORMATION = "unit-information"
	| PERCENTAGE = "percentage"
	| TEMPERATURE = "temperature"
	| DURATION = "duration"
	| AGE = "age"
	| ADDRESS = "address"
	| STREET_ADDRESS = "street-address"
	| ZIP_CODE = "zip-code"
	| CAPITAL = "capital"
	| COUNTRY = "country"
	| COUNTRY_CODE = "country-code"
	| CITY = 'city'
	| STATE = "state"
	| CITY_US = "city-us"
	| STATE_US = "state-us"
	| COUNTY_US = "county-us"
	| CITY_GB = "city-gb"
	| STATE_GB = "state-gb"
	| COUNTY_GB = "county-gb"
	| PLACE_ATTRACTION_US = "place-attraction-us"
	| PLACE_ATTRACTION_GB = "place-attraction-gb"
	| PLACE_ATTRACTION = "place-attraction"
	| AIRPORT = "airport"
	| LOCATION = "location"
	| EMAIL = "email"
	| PHONE_NUMBER = "phone-number"
	| GIVEN_NAME = "given-name"
	| LAST_NAME = "last-name"
	| MUSIC_ARTIST = "music-artist"
	| MUSIC_GENRE = "music-genre"
	| COLOR = "color"
	| LANGUAGE = "language"
	| URL = "url"
;

EString returns ecore::EString:
	STRING | ID('->'ID)*;


/*
 * Multiple keyword instructions.
 * Instructions containing multiple keywords are moved to dedicated rules to enable multiple keyword completion (see 
 * https://blogs.itemis.com/en/xtext-hint-content-assist-for-multiple-consecutive-keywords)
 */

RequiresContext:
	'requires' 'context'
;

CreatesContext:
	'creates' 'context'
;

WithLifespan:
	'with' 'lifespan'
;
	
SetsParameter:
	'sets' 'parameter'
;

FromFragment:
	'from' 'fragment'
;
